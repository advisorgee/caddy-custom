name: Build caddy-easydns

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'
  push:
    branches: [main]
    paths:
      - caddy-easydns/Dockerfile

env:
  DOCKER_BUILDKIT: 1
  GOTOOLCHAIN: auto
  DOCKER_NAME: caddy-easydns
  DOCKER_DESCRIPTION: "Caddy Docker custom build with EasyDNS DNS and Security modules"
  DOCKERFILE_PATH: caddy-easydns/Dockerfile

jobs:
  update-dockerfile:
    name: Update Dockerfile to latest Caddy version
    runs-on: ubuntu-latest
    outputs:
      caddy_version: ${{ steps.latest_caddy.outputs.version }}
      updated: ${{ steps.update_dockerfile.outputs.updated }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Get latest Caddy version from GitHub
        id: latest_caddy
        run: |
          latest=$(curl -s https://api.github.com/repos/caddyserver/caddy/releases/latest | jq -r .tag_name | sed 's/^v//')
          if [[ -z "$latest" ]]; then
            echo "Failed to fetch Caddy version"
            exit 1
          fi
          latest=$(echo "$latest" | tr -d "\r" | xargs)
          echo "version=$latest" >> "$GITHUB_OUTPUT"

      - name: Get current Caddy version from Dockerfile
        id: current_caddy
        run: |
          current=$(grep -Eo 'caddy:[0-9]+\.[0-9]+\.[0-9]+' $DOCKERFILE_PATH | cut -d ':' -f2)
          if [[ -z "$current" ]]; then
            echo "Failed to extract current version"
            exit 1
          fi
          current=$(echo "$current" | tr -d "\r" | xargs)
          echo "version=$current" >> "$GITHUB_OUTPUT"

      - name: Update Dockerfile if needed
        id: update_dockerfile
        run: |
          # latest="2.10.0"
          # Extract only the first Caddy version from the Dockerfile
          current=$(grep -oP '(?<=FROM caddy:)[^ ]+' "$DOCKERFILE_PATH" | head -n 1 | tr -d '\r' | xargs)
          updated="false"

          echo "Latest:  $latest"
          echo "Current: $current"

          if [ "$latest" != "$current" ]; then
            echo "Updating Dockerfile from caddy:$current to caddy:$latest..."
            sed -i "0,/caddy:$current/s//caddy:$latest/" "$DOCKERFILE_PATH"

            if git diff --quiet "$DOCKERFILE_PATH"; then
              echo "No changes detected after sed."
            else
              git config --global user.name "github-actions[bot]"
              git config --global user.email "github-actions[bot]@users.noreply.github.com"
              git add "$DOCKERFILE_PATH"
              git commit -m "chore: bump caddy version to $latest"
              git push
              updated="true"
            fi
          else
            echo "Dockerfile already up to date."
          fi
 
          updated=$(echo "$updated" | tr -d '\r' | xargs)
          echo "updated=$updated" >> "$GITHUB_OUTPUT"

  build-and-publish:
    name: Build and publish Docker image
    runs-on: ubuntu-latest
    needs: update-dockerfile
    if: needs.update-dockerfile.outputs.updated == 'true' || github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse Caddy version from Dockerfile
        id: version
        run: |
          version=$(grep -Eo 'caddy:[0-9]+\.[0-9]+\.[0-9]+' "${{ env.DOCKERFILE_PATH }}" | cut -d ':' -f2)
          if [[ -z "$version" ]]; then
            echo "Failed to extract version from Dockerfile"
            exit 1
          fi
          version=$(echo "$version" | tr -d "\r" | xargs)
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Build and publish container image
        uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          file: ./${{ env.DOCKERFILE_PATH }}
          push: true
          tags: |
            ghcr.io/${{ github.actor }}/${{ env.DOCKER_NAME }}:v${{ steps.version.outputs.version }}
            docker.io/${{ github.actor }}/${{ env.DOCKER_NAME }}:v${{ steps.version.outputs.version }}
          labels: |
            org.opencontainers.image.title=${{ env.DOCKER_NAME }}
            org.opencontainers.image.description=${{ env.DOCKER_DESCRIPTION }}
          platforms: linux/amd64,linux/arm64
